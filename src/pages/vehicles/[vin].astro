---
import { z } from "zod";
import Layout from "@layouts/Layout.astro";
import MapView from "@components/MapView.astro";
import { actions } from "astro:actions";
import { Image } from "astro:assets";
import { type VehicleControls } from "@utils/parsers/vehicleListParser";
import VehicleControlsGrid from "@components/vehicles/VehicleControlsGrid.astro";
import { transformBarToPsi } from "@utils/barToPsi";

import CarImage from "../../assets/car-topdown.png";
import { kmsToMiles } from "@utils/distanceConvert";

const { vin } = Astro.params;

if (!vin) {
	return Astro.redirect("/");
}

const getVehicle = async () => {
	const { data, error } = await Astro.callAction(
		actions.getVehicles.getIndividual,
		{ vin },
	);
	if (data) {
		return data;
	} else {
		throw new Error("failed to fetch vehicle data");
	}
};

const getVehicleActivity = async () => {
	const { data, error } = await Astro.callAction(
		actions.getVehicles.getVehicleActivity,
		{},
	);
	if (data) {
		return data.events;
	} else {
		throw new Error("failed to fetch vehicle data");
	}
};

const [data, activityData] = await Promise.all([
	getVehicle(),
	getVehicleActivity(),
]);

const vehicleControls: VehicleControls = data;

const vehicleTitle = data?.name ?? vin;
---

<Layout title={vehicleTitle}>
	<h1 class="text-xl font-bold my-2">Information</h1>

	<div class="grid grid-cols-1 lg:grid-cols-5 px-2">
		<div class="flex flex-col col-span-3 gap-4">
			<ul class="flex flex-col gap-2">
				<li class="flex gap-2 items-center">
					<p class="text-lg font-bold uppercase">
						Name
					</p>
					<p class="">
						{data?.name}
					</p>
				</li>
				<li class="grid grid-cols-2">
					<p class="text-lg font-bold uppercase">
						VIN
					</p>
					<p class="">
						{data?.VIN}
					</p>
				</li>
				<li class="grid grid-cols-2">
					<p class="text-lg font-bold uppercase">
						Odometer
					</p>
					<p class="">
						{
							data?.odometer?.toLocaleString()
						}
					</p>
				</li>
				<li class="grid grid-cols-2">
					<p class="text-lg font-bold uppercase">
						Currrent SOC
					</p>
					<p class="">
						{
							data?.range_decimal
								? `${Math.round(
										data?.range_decimal *
											100,
									)}%`
								: null
						} â€¢ {
							Math.round(
								kmsToMiles(
									data?.rated_range_km! *
										data?.range_decimal!,
								)!,
							)
						} mi remaining
					</p>
				</li>
				<li class="grid grid-cols-2">
					<p class="text-lg font-bold uppercase">
						Battery Health
					</p>
					<p class="">
						{data.name}
					</p>
				</li>
			</ul>

			<div class="flex flex-col gap-2">
				<p>Controls</p>
				<VehicleControlsGrid
					vehicleControls={vehicleControls}
					vin={vin}
				/>
			</div>

			{
				/*
				 * Charging block
				 */
			}
			<div class="flex gap-2 items-center">
				<p class="text-lg font-medium">Charging</p>
				<a
					href={`/supercharging/${data?.VIN}`}
					class="px-4 py-2 rounded-lg border opacity-30 hover:opacity-100"
				>
					View Supercharge Costs
				</a>
			</div>

			{
				/*
				 * Tire pressure block
				 */
			}
			<div class="flex gap-2">
				<p class="text-lg font-medium">Tire Pressure</p>
				<div class="flex gap-2">
					<div class="flex flex-col">
						<p>
							{
								transformBarToPsi(
									data
										.tires
										?.front_left_pressure,
								)
							}
						</p>
						<p class="mt-auto">
							{
								transformBarToPsi(
									data
										.tires
										?.rear_left_pressure,
								)
							}
						</p>
					</div>
					<Image
						src={CarImage}
						alt="car image"
						height={100}
						width={50}
						class="mx-auto"
					/>
					<div class="flex flex-col">
						<p>
							{
								transformBarToPsi(
									data
										.tires
										?.front_right_pressure,
								)
							}
						</p>
						<p class="mt-auto">
							{
								transformBarToPsi(
									data
										.tires
										?.rear_right_pressure,
								)
							}
						</p>
					</div>
				</div>
			</div>
			<div class="flex gap-2">
				<p class="text-lg font-medium">Last Seen</p>
				<div class="flex flex-col gap-2">
					<p>Driving</p>
					<p>Coral Gables</p>
					<p>
						{data?.lat}, {data?.lon}
					</p>
					<p>Driving</p>
				</div>
			</div>

			<div class="flex flex-col gap-2">
				<p class="text-lg font-medium">Activity Log</p>
				<div
					class="grid grid-cols-2 gap-2 mr-auto text-start px-4"
				>
					{
						activityData.map((x) => {
							const newDate =
								new Date(
									x.vehicle_datetime *
										1000,
								);
							return (
								<>
									<p class="">
										{newDate.toLocaleString()}
									</p>
									<div class="flex gap-2 items-center">
										<svg
											width="15"
											height="15"
											viewBox="0 0 15 15"
											fill="none"
											xmlns="http://www.w3.org/2000/svg"
										>
											<path
												d="M7.5 0C7.77614 0 8 0.223858 8 0.5V2.5C8 2.77614 7.77614 3 7.5 3C7.22386 3 7 2.77614 7 2.5V0.5C7 0.223858 7.22386 0 7.5 0ZM2.1967 2.1967C2.39196 2.00144 2.70854 2.00144 2.90381 2.1967L4.31802 3.61091C4.51328 3.80617 4.51328 4.12276 4.31802 4.31802C4.12276 4.51328 3.80617 4.51328 3.61091 4.31802L2.1967 2.90381C2.00144 2.70854 2.00144 2.39196 2.1967 2.1967ZM0.5 7C0.223858 7 0 7.22386 0 7.5C0 7.77614 0.223858 8 0.5 8H2.5C2.77614 8 3 7.77614 3 7.5C3 7.22386 2.77614 7 2.5 7H0.5ZM2.1967 12.8033C2.00144 12.608 2.00144 12.2915 2.1967 12.0962L3.61091 10.682C3.80617 10.4867 4.12276 10.4867 4.31802 10.682C4.51328 10.8772 4.51328 11.1938 4.31802 11.3891L2.90381 12.8033C2.70854 12.9986 2.39196 12.9986 2.1967 12.8033ZM12.5 7C12.2239 7 12 7.22386 12 7.5C12 7.77614 12.2239 8 12.5 8H14.5C14.7761 8 15 7.77614 15 7.5C15 7.22386 14.7761 7 14.5 7H12.5ZM10.682 4.31802C10.4867 4.12276 10.4867 3.80617 10.682 3.61091L12.0962 2.1967C12.2915 2.00144 12.608 2.00144 12.8033 2.1967C12.9986 2.39196 12.9986 2.70854 12.8033 2.90381L11.3891 4.31802C11.1938 4.51328 10.8772 4.51328 10.682 4.31802ZM8 12.5C8 12.2239 7.77614 12 7.5 12C7.22386 12 7 12.2239 7 12.5V14.5C7 14.7761 7.22386 15 7.5 15C7.77614 15 8 14.7761 8 14.5V12.5ZM10.682 10.682C10.8772 10.4867 11.1938 10.4867 11.3891 10.682L12.8033 12.0962C12.9986 12.2915 12.9986 12.608 12.8033 12.8033C12.608 12.9986 12.2915 12.9986 12.0962 12.8033L10.682 11.3891C10.4867 11.1938 10.4867 10.8772 10.682 10.682ZM5.5 7.5C5.5 6.39543 6.39543 5.5 7.5 5.5C8.60457 5.5 9.5 6.39543 9.5 7.5C9.5 8.60457 8.60457 9.5 7.5 9.5C6.39543 9.5 5.5 8.60457 5.5 7.5ZM7.5 4.5C5.84315 4.5 4.5 5.84315 4.5 7.5C4.5 9.15685 5.84315 10.5 7.5 10.5C9.15685 10.5 10.5 9.15685 10.5 7.5C10.5 5.84315 9.15685 4.5 7.5 4.5Z"
												fill="currentColor"
												fill-rule="evenodd"
												clip-rule="evenodd"
											/>
										</svg>
										<p class="">
											{
												x.event_name
											}
										</p>
									</div>
								</>
							);
						})
					}
				</div>
			</div>
			{
				Object.entries(data).map((kv) => (
					<p class="break-words">
						{kv[0]}:
						{typeof kv[1] === "object"
							? JSON.stringify(kv[1])
							: kv[1]}
					</p>
				))
			}
		</div>
		<MapView vins={[data.VIN!]} />
	</div>
</Layout>
